% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slingshot2.R
\name{get_lineages}
\alias{get_lineages}
\title{Infer Lineage Structure from Clustered Samples}
\usage{
get_lineages(X, clus.labels, omega = Inf, start.clus = NULL,
  end.clus = NULL, distout = FALSE)
}
\arguments{
\item{X}{numeric, the nxp matrix of samples in a reduced dimensionality space}

\item{clus.labels}{character, a vector of length n denoting cluster labels}

\item{omega}{(optional) numeric between 0 and 1 or Inf. This granularity parameter determines the distance between every real cluster and the artificial cluster, OMEGA. It is parameterized as a fraction of the largest distance between two real clusters (hence, any value greater than 1 would result in a single tree being returned and would be equivalent to setting omega = Inf, the default)}

\item{start.clus}{(optional) character, indicates the cluster(s) *from* which lineages will be drawn}

\item{end.clus}{(optional) character, indicates the cluster(s) which will be forced leaf nodes in their trees}
}
\value{
a list with L+2 items where L is the number of lineages identified. The first L items are character vectors with the names of the clusters included in that lineage. The last two items are \code{forest}, the connectivity matrix, and \code{C}, a clusters x lineages identity matrix.
}
\description{
Given a reduced data matrix nxp and a vector of cluster identities (optionally including -1's for "unclustered"), this function infers a forest structure on the clusters and returns paths through the forest that can be interpreted as lineages.
}
\details{
The \code{forest} is learned by fitting a (possibly constrained) minimum-spanning tree on the clusters and the artificial cluster, OMEGA, which is a distance \code{omega} from every real cluster.

Once the \code{forest} is known, lineages are identified in any tree with at least two clusters. For a given tree, if there is an annotated starting cluster, every possible path out of a starting cluster and ending in a leaf that isn't another starting cluster will be returned. If no starting cluster is annotated, every leaf will be considered as a potential starting cluster and whichever configuration produces the longest average lineage length (in terms of number of clusters included) will be returned.
}
\examples{
data("toy_data")
get_lineages(X, clus.labels)
get_lineages(X, clus.labels, start.clus = 'a')

}

